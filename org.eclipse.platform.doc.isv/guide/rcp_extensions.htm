<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html lang="en">
<HEAD>

<meta name="copyright" content="Copyright (c) IBM Corporation and others 2000, 2005. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page." >

<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
Making UI contributions
</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H2>
Making UI contributions</H2>
<P>
So far, we've seen that the main difference between a rich client platform plug-in and an 
Eclipse SDK plug-in is that the rich client plug-in is responsible for specifying the  
class that should be run when the platform is started.  This class creates and runs a
workbench window that is configured appropriately.  What else is different about a rich
client application?  Not much, actually.
</p>
<p>Once the infrastructure for the application workbench is in place, the techniques for 
adding functionality to the workbench are the same as those we used when we were extending the
platform SDK workbench.  The workbench UI extension points are used to add views, editors,
menus, and all of the other contributions we know and love.  In the case of the browser example,
we'll be adding extensions for a perspective and a couple of views. </p>
<p>
We were introduced to these extensions in <a href="workbench.htm">Plugging into the workbench</a>.
For completeness, we'll take a look at how the browser example uses these extensions, but we'll
assume that we already have a working knowledge of these concepts.
</p>





</BODY>
</HTML>
